//
// Created by PinkySmile on 26/05/2021.
//

#include <sstream>
#include <iomanip>
#include "CPUInstructions.hpp"
#include "Strings.hpp"

namespace GBEmulator::Instructions
{
	standard::string intToHex(unsigned i, unsigned size)
	{
		std::stringstream stream;
		stream << std::setfill ('0') << std::setw(size) << std::hex << std::uppercase << static_cast<int>(i);
		return stream.str().c_str();
	}

	const std::function<standard::string(const CPU &, uint16_t)> _instructionsString[256] = {
		[](const CPU &, uint16_t) { return "NOP"; },
		[](const CPU &cpu, uint16_t address) {
			return "LD bc," + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &, uint16_t) { return "LD (bc), a"; },
		[](const CPU &, uint16_t) { return "INC bc"; },
		[](const CPU &, uint16_t) { return "INC b"; },
		[](const CPU &, uint16_t) { return "DEC b"; },
		[](const CPU &cpu, uint16_t address) { return "LD b," + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "RLCA"; },
		[](const CPU &cpu, uint16_t address) {
			return "LD (" + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address)) + "), SP";
		},
		[](const CPU &, uint16_t) { return "ADD hl,bc"; },
		[](const CPU &, uint16_t) { return "LD a,(bc)"; },
		[](const CPU &, uint16_t) { return "DEC bc"; },
		[](const CPU &, uint16_t) { return "INC c"; },
		[](const CPU &, uint16_t) { return "DEC c"; },
		[](const CPU &cpu, uint16_t address) { return "LD c," + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "RRCA"; },
		[](const CPU &, uint16_t) { return "STOP"; },
		[](const CPU &cpu, uint16_t address) {
			return "LD de," + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &, uint16_t) { return "LD (de),a"; },
		[](const CPU &, uint16_t) { return "INC de"; },
		[](const CPU &, uint16_t) { return "INC d"; },
		[](const CPU &, uint16_t) { return "DEC d"; },
		[](const CPU &cpu, uint16_t address) { return "LD d," + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "RLA"; },
		[](const CPU &cpu, uint16_t address) { return "JR " + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "ADD hl,de"; },
		[](const CPU &, uint16_t) { return "LD a,(de)"; },
		[](const CPU &, uint16_t) { return "DEC de"; },
		[](const CPU &, uint16_t) { return "INC e"; },
		[](const CPU &, uint16_t) { return "DEC e"; },
		[](const CPU &cpu, uint16_t address) { return "LD e," + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "RRA"; },
		[](const CPU &cpu, uint16_t address) { return "JR nz," + intToHex(cpu.read(address)); },
		[](const CPU &cpu, uint16_t address) {
			return "LD hl, " + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &, uint16_t) { return "LDI (hl),a"; },
		[](const CPU &, uint16_t) { return "INC hl"; },
		[](const CPU &, uint16_t) { return "INC h"; },
		[](const CPU &, uint16_t) { return "DEC h"; },
		[](const CPU &cpu, uint16_t address) { return "LD h," + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "DAA"; },
		[](const CPU &cpu, uint16_t address) { return "JR z," + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "ADD hl,hl"; },
		[](const CPU &, uint16_t) { return "LDI a,(hl)"; },
		[](const CPU &, uint16_t) { return "DEC hl"; },
		[](const CPU &, uint16_t) { return "INC l"; },
		[](const CPU &, uint16_t) { return "DEC l"; },
		[](const CPU &cpu, uint16_t address) { return "LD l," + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "CPL"; },
		[](const CPU &cpu, uint16_t address) { return "JR nc," + intToHex(cpu.read(address)); },
		[](const CPU &cpu, uint16_t address) {
			return "LD sp, " + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &, uint16_t) { return "LD (hl-), a"; },
		[](const CPU &, uint16_t) { return "INC sp"; },
		[](const CPU &, uint16_t) { return "INC (hl)"; },
		[](const CPU &, uint16_t) { return "DEC (hl)"; },
		[](const CPU &cpu, uint16_t address) { return "LD (hl)," + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "SCF"; },
		[](const CPU &cpu, uint16_t address) { return "JR c," + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "ADD hl,sp"; },
		[](const CPU &, uint16_t) { return "LDD a,(hl)"; },
		[](const CPU &, uint16_t) { return "DEC sp"; },
		[](const CPU &, uint16_t) { return "INC a"; },
		[](const CPU &, uint16_t) { return "DEC a"; },
		[](const CPU &cpu, uint16_t address) { return "LD a," + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "CCF"; },
		[](const CPU &, uint16_t) { return "LD b,b"; },
		[](const CPU &, uint16_t) { return "LD b,c"; },
		[](const CPU &, uint16_t) { return "LD b,d"; },
		[](const CPU &, uint16_t) { return "LD b,e"; },
		[](const CPU &, uint16_t) { return "LD b,h"; },
		[](const CPU &, uint16_t) { return "LD b,l"; },
		[](const CPU &, uint16_t) { return "LD b,(hl)"; },
		[](const CPU &, uint16_t) { return "LD b,a"; },
		[](const CPU &, uint16_t) { return "LD c,b"; },
		[](const CPU &, uint16_t) { return "LD c,c"; },
		[](const CPU &, uint16_t) { return "LD c,d"; },
		[](const CPU &, uint16_t) { return "LD c,e"; },
		[](const CPU &, uint16_t) { return "LD c,h"; },
		[](const CPU &, uint16_t) { return "LD c,l"; },
		[](const CPU &, uint16_t) { return "LD c,(hl)"; },
		[](const CPU &, uint16_t) { return "LD c,a"; },
		[](const CPU &, uint16_t) { return "LD d,b"; },
		[](const CPU &, uint16_t) { return "LD d,c"; },
		[](const CPU &, uint16_t) { return "LD d,d"; },
		[](const CPU &, uint16_t) { return "LD d,e"; },
		[](const CPU &, uint16_t) { return "LD d,h"; },
		[](const CPU &, uint16_t) { return "LD d,l"; },
		[](const CPU &, uint16_t) { return "LD d,(hl)"; },
		[](const CPU &, uint16_t) { return "LD d,a"; },
		[](const CPU &, uint16_t) { return "LD e,b"; },
		[](const CPU &, uint16_t) { return "LD e,c"; },
		[](const CPU &, uint16_t) { return "LD e,d"; },
		[](const CPU &, uint16_t) { return "LD e,e"; },
		[](const CPU &, uint16_t) { return "LD e,h"; },
		[](const CPU &, uint16_t) { return "LD e,l"; },
		[](const CPU &, uint16_t) { return "LD e,(hl)"; },
		[](const CPU &, uint16_t) { return "LD e,a"; },
		[](const CPU &, uint16_t) { return "LD h,b"; },
		[](const CPU &, uint16_t) { return "LD h,c"; },
		[](const CPU &, uint16_t) { return "LD h,d"; },
		[](const CPU &, uint16_t) { return "LD h,e"; },
		[](const CPU &, uint16_t) { return "LD h,h"; },
		[](const CPU &, uint16_t) { return "LD h,l"; },
		[](const CPU &, uint16_t) { return "LD h,(hl)"; },
		[](const CPU &, uint16_t) { return "LD h,a"; },
		[](const CPU &, uint16_t) { return "LD l,b"; },
		[](const CPU &, uint16_t) { return "LD l,c"; },
		[](const CPU &, uint16_t) { return "LD l,d"; },
		[](const CPU &, uint16_t) { return "LD l,e"; },
		[](const CPU &, uint16_t) { return "LD l,h"; },
		[](const CPU &, uint16_t) { return "LD l,l"; },
		[](const CPU &, uint16_t) { return "LD l,(hl)"; },
		[](const CPU &, uint16_t) { return "LD l,a"; },
		[](const CPU &, uint16_t) { return "LD (hl),b"; },
		[](const CPU &, uint16_t) { return "LD (hl),c"; },
		[](const CPU &, uint16_t) { return "LD (hl),d"; },
		[](const CPU &, uint16_t) { return "LD (hl),e"; },
		[](const CPU &, uint16_t) { return "LD (hl),h"; },
		[](const CPU &, uint16_t) { return "LD (hl),l"; },
		[](const CPU &, uint16_t) { return "HALT"; },
		[](const CPU &, uint16_t) { return "LD (hl),a"; },
		[](const CPU &, uint16_t) { return "LD a,b"; },
		[](const CPU &, uint16_t) { return "LD a,c"; },
		[](const CPU &, uint16_t) { return "LD a,d"; },
		[](const CPU &, uint16_t) { return "LD a,e"; },
		[](const CPU &, uint16_t) { return "LD a,h"; },
		[](const CPU &, uint16_t) { return "LD a,l"; },
		[](const CPU &, uint16_t) { return "LD a,(hl)"; },
		[](const CPU &, uint16_t) { return "LD a,a"; },
		[](const CPU &, uint16_t) { return "ADD b"; },
		[](const CPU &, uint16_t) { return "ADD c"; },
		[](const CPU &, uint16_t) { return "ADD d"; },
		[](const CPU &, uint16_t) { return "ADD e"; },
		[](const CPU &, uint16_t) { return "ADD h"; },
		[](const CPU &, uint16_t) { return "ADD l"; },
		[](const CPU &, uint16_t) { return "ADD (hl)"; },
		[](const CPU &, uint16_t) { return "ADD a"; },
		[](const CPU &, uint16_t) { return "ADC b"; },
		[](const CPU &, uint16_t) { return "ADC c"; },
		[](const CPU &, uint16_t) { return "ADC d"; },
		[](const CPU &, uint16_t) { return "ADC e"; },
		[](const CPU &, uint16_t) { return "ADC h"; },
		[](const CPU &, uint16_t) { return "ADC l"; },
		[](const CPU &, uint16_t) { return "ADC (hl)"; },
		[](const CPU &, uint16_t) { return "ADC a"; },
		[](const CPU &, uint16_t) { return "SUB b"; },
		[](const CPU &, uint16_t) { return "SUB c"; },
		[](const CPU &, uint16_t) { return "SUB d"; },
		[](const CPU &, uint16_t) { return "SUB e"; },
		[](const CPU &, uint16_t) { return "SUB h"; },
		[](const CPU &, uint16_t) { return "SUB l"; },
		[](const CPU &, uint16_t) { return "SUB (hl)"; },
		[](const CPU &, uint16_t) { return "SUB a"; },
		[](const CPU &, uint16_t) { return "SBC b"; },
		[](const CPU &, uint16_t) { return "SBC c"; },
		[](const CPU &, uint16_t) { return "SBC d"; },
		[](const CPU &, uint16_t) { return "SBC e"; },
		[](const CPU &, uint16_t) { return "SBC h"; },
		[](const CPU &, uint16_t) { return "SBC l"; },
		[](const CPU &, uint16_t) { return "SBC (hl)"; },
		[](const CPU &, uint16_t) { return "SBC a"; },
		[](const CPU &, uint16_t) { return "AND b"; },
		[](const CPU &, uint16_t) { return "AND c"; },
		[](const CPU &, uint16_t) { return "AND d"; },
		[](const CPU &, uint16_t) { return "AND e"; },
		[](const CPU &, uint16_t) { return "AND h"; },
		[](const CPU &, uint16_t) { return "AND l"; },
		[](const CPU &, uint16_t) { return "AND (hl)"; },
		[](const CPU &, uint16_t) { return "AND a"; },
		[](const CPU &, uint16_t) { return "XOR b"; },
		[](const CPU &, uint16_t) { return "XOR c"; },
		[](const CPU &, uint16_t) { return "XOR d"; },
		[](const CPU &, uint16_t) { return "XOR e"; },
		[](const CPU &, uint16_t) { return "XOR h"; },
		[](const CPU &, uint16_t) { return "XOR l"; },
		[](const CPU &, uint16_t) { return "XOR (hl)"; },
		[](const CPU &, uint16_t) { return "XOR a"; },
		[](const CPU &, uint16_t) { return "OR b"; },
		[](const CPU &, uint16_t) { return "OR c"; },
		[](const CPU &, uint16_t) { return "OR d"; },
		[](const CPU &, uint16_t) { return "OR e"; },
		[](const CPU &, uint16_t) { return "OR h"; },
		[](const CPU &, uint16_t) { return "OR l"; },
		[](const CPU &, uint16_t) { return "OR (hl)"; },
		[](const CPU &, uint16_t) { return "OR a"; },
		[](const CPU &, uint16_t) { return "CP b"; },
		[](const CPU &, uint16_t) { return "CP c"; },
		[](const CPU &, uint16_t) { return "CP d"; },
		[](const CPU &, uint16_t) { return "CP e"; },
		[](const CPU &, uint16_t) { return "CP h"; },
		[](const CPU &, uint16_t) { return "CP l"; },
		[](const CPU &, uint16_t) { return "CP (hl)"; },
		[](const CPU &, uint16_t) { return "CP a"; },
		[](const CPU &, uint16_t) { return "RET nz"; },
		[](const CPU &, uint16_t) { return "POP bc"; },
		[](const CPU &cpu, uint16_t address) {
			return "JP nz," + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &cpu, uint16_t address) {
			return "JP " + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &cpu, uint16_t address) {
			return "CALL nz," + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &, uint16_t) { return "PUSH bc"; },
		[](const CPU &cpu, uint16_t address) { return "ADD " + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "RST 00h"; },
		[](const CPU &, uint16_t) { return "RET z"; },
		[](const CPU &, uint16_t) { return "RET"; },
		[](const CPU &cpu, uint16_t address) {
			return "JP z," + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &cpu, uint16_t address) {
			return _bitLevelInstructionsString[cpu.read(address)](cpu, address + 1);
		},
		[](const CPU &cpu, uint16_t address) {
			return "CALL z," + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &cpu, uint16_t address) {
			return "CALL " + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &cpu, uint16_t address) { return "ADC " + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "RST 08h"; },
		[](const CPU &, uint16_t) { return "RET nc"; },
		[](const CPU &, uint16_t) { return "POP de"; },
		[](const CPU &cpu, uint16_t address) {
			return "JP nc," + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &cpu, uint16_t address) {
			return "CALL nc," + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &, uint16_t) { return "PUSH de"; },
		[](const CPU &cpu, uint16_t address) { return "SUB " + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "RST 10h"; },
		[](const CPU &, uint16_t) { return "RET c"; },
		[](const CPU &, uint16_t) { return "RETI"; },
		[](const CPU &cpu, uint16_t address) {
			return "JP c," + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &cpu, uint16_t address) {
			return "CALL c," + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address));
		},
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &cpu, uint16_t address) { return "SBC " + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "RST 18h"; },
		[](const CPU &cpu, uint16_t address) { return "LD (FF00+" + intToHex(cpu.read(address)) + "),a"; },
		[](const CPU &, uint16_t) { return "POP hl"; },
		[](const CPU &, uint16_t) { return "LD (FF00+c),a"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "PUSH hl"; },
		[](const CPU &cpu, uint16_t address) { return "AND " + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "RST 20h"; },
		[](const CPU &cpu, uint16_t address) { return "ADD sp," + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "JP (hl)"; },
		[](const CPU &cpu, uint16_t address) {
			return "LD (" + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address)) + "),a";
		},
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &cpu, uint16_t address) { return "XOR " + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "RST 28h"; },
		[](const CPU &cpu, uint16_t address) { return "LD a,(FF00+" + intToHex(cpu.read(address)) + ")"; },
		[](const CPU &, uint16_t) { return "POP af"; },
		[](const CPU &, uint16_t) { return "LD a,(FF00+c)"; },
		[](const CPU &, uint16_t) { return "DI"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "PUSH af"; },
		[](const CPU &cpu, uint16_t address) { return "OR " + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "RST 30h"; },
		[](const CPU &cpu, uint16_t address) { return "LD hl,sp+" + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "LD sp,hl"; },
		[](const CPU &cpu, uint16_t address) {
			return "LD a,(" + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address)) + ")";
		},
		[](const CPU &, uint16_t) { return "EI"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &cpu, uint16_t address) { return "CP " + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "RST 38h"; },
	};


	const std::function<standard::string(const CPU &, uint16_t)> _instructionsString2[256] = {
		[](const CPU &, uint16_t) { return "NOP"; },
		[](const CPU &, uint16_t) { return "LD bc,**";},
		[](const CPU &cpu, uint16_t) { return "LD (" + intToHex(cpu.getRegisters().bc, 4) + "), a"; },
		[](const CPU &, uint16_t) { return "INC bc"; },
		[](const CPU &, uint16_t) { return "INC b"; },
		[](const CPU &, uint16_t) { return "DEC b"; },
		[](const CPU &, uint16_t) { return "LD b,*"; },
		[](const CPU &, uint16_t) { return "RLCA"; },
		[](const CPU &cpu, uint16_t address) {
			return "LD (" + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address)) + "), SP";
		},
		[](const CPU &, uint16_t) { return "ADD hl,bc"; },
		[](const CPU &cpu, uint16_t) { return "LD a,(" + intToHex(cpu.getRegisters().bc, 4) + ")"; },
		[](const CPU &, uint16_t) { return "DEC bc"; },
		[](const CPU &, uint16_t) { return "INC c"; },
		[](const CPU &, uint16_t) { return "DEC c"; },
		[](const CPU &, uint16_t) { return "LD c,*"; },
		[](const CPU &, uint16_t) { return "RRCA"; },
		[](const CPU &, uint16_t) { return "STOP"; },
		[](const CPU &, uint16_t) {return "LD de,**"; },
		[](const CPU &cpu, uint16_t) { return "LD (" + intToHex(cpu.getRegisters().de, 4) + "),a"; },
		[](const CPU &, uint16_t) { return "INC de"; },
		[](const CPU &, uint16_t) { return "INC d"; },
		[](const CPU &, uint16_t) { return "DEC d"; },
		[](const CPU &, uint16_t) { return "LD d,*"; },
		[](const CPU &, uint16_t) { return "RLA"; },
		[](const CPU &, uint16_t) { return "JR *"; },
		[](const CPU &, uint16_t) { return "ADD hl,de"; },
		[](const CPU &cpu, uint16_t) { return "LD a,(" + intToHex(cpu.getRegisters().de, 4) + ")"; },
		[](const CPU &, uint16_t) { return "DEC de"; },
		[](const CPU &, uint16_t) { return "INC e"; },
		[](const CPU &, uint16_t) { return "DEC e"; },
		[](const CPU &, uint16_t) { return "LD e,*"; },
		[](const CPU &, uint16_t) { return "RRA"; },
		[](const CPU &, uint16_t) { return "JR nz,*"; },
		[](const CPU &, uint16_t) { return "LD hl,**"; },
		[](const CPU &cpu, uint16_t) { return "LD (" + intToHex(cpu.getRegisters().hl, 4) + "),a"; },
		[](const CPU &, uint16_t) { return "INC hl"; },
		[](const CPU &, uint16_t) { return "INC h"; },
		[](const CPU &, uint16_t) { return "DEC h"; },
		[](const CPU &, uint16_t) { return "LD h,*"; },
		[](const CPU &, uint16_t) { return "DAA"; },
		[](const CPU &, uint16_t) { return "JR z,*"; },
		[](const CPU &, uint16_t) { return "ADD hl,hl"; },
		[](const CPU &cpu, uint16_t) { return "LD a,(" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "DEC hl"; },
		[](const CPU &, uint16_t) { return "INC l"; },
		[](const CPU &, uint16_t) { return "DEC l"; },
		[](const CPU &, uint16_t) { return "LD l,*"; },
		[](const CPU &, uint16_t) { return "CPL"; },
		[](const CPU &, uint16_t) { return "JR nc,*"; },
		[](const CPU &, uint16_t) { return "LD sp,**"; },
		[](const CPU &cpu, uint16_t) { return "LD (" + intToHex(cpu.getRegisters().hl, 4) + "), a"; },
		[](const CPU &, uint16_t) { return "INC sp"; },
		[](const CPU &cpu, uint16_t) { return "INC (" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &cpu, uint16_t) { return "DEC (" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &cpu, uint16_t) { return "LD (" + intToHex(cpu.getRegisters().hl, 4) + "),*"; },
		[](const CPU &, uint16_t) { return "SCF"; },
		[](const CPU &, uint16_t) { return "JR c,*"; },
		[](const CPU &, uint16_t) { return "ADD hl,sp"; },
		[](const CPU &cpu, uint16_t) { return "LD a,(" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "DEC sp"; },
		[](const CPU &, uint16_t) { return "INC a"; },
		[](const CPU &, uint16_t) { return "DEC a"; },
		[](const CPU &, uint16_t) { return "LD a,*"; },
		[](const CPU &, uint16_t) { return "CCF"; },
		[](const CPU &, uint16_t) { return "LD b,b"; },
		[](const CPU &, uint16_t) { return "LD b,c"; },
		[](const CPU &, uint16_t) { return "LD b,d"; },
		[](const CPU &, uint16_t) { return "LD b,e"; },
		[](const CPU &, uint16_t) { return "LD b,h"; },
		[](const CPU &, uint16_t) { return "LD b,l"; },
		[](const CPU &cpu, uint16_t) { return "LD b,(" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "LD b,a"; },
		[](const CPU &, uint16_t) { return "LD c,b"; },
		[](const CPU &, uint16_t) { return "LD c,c"; },
		[](const CPU &, uint16_t) { return "LD c,d"; },
		[](const CPU &, uint16_t) { return "LD c,e"; },
		[](const CPU &, uint16_t) { return "LD c,h"; },
		[](const CPU &, uint16_t) { return "LD c,l"; },
		[](const CPU &cpu, uint16_t) { return "LD c,(" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "LD c,a"; },
		[](const CPU &, uint16_t) { return "LD d,b"; },
		[](const CPU &, uint16_t) { return "LD d,c"; },
		[](const CPU &, uint16_t) { return "LD d,d"; },
		[](const CPU &, uint16_t) { return "LD d,e"; },
		[](const CPU &, uint16_t) { return "LD d,h"; },
		[](const CPU &, uint16_t) { return "LD d,l"; },
		[](const CPU &cpu, uint16_t) { return "LD d,(" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "LD d,a"; },
		[](const CPU &, uint16_t) { return "LD e,b"; },
		[](const CPU &, uint16_t) { return "LD e,c"; },
		[](const CPU &, uint16_t) { return "LD e,d"; },
		[](const CPU &, uint16_t) { return "LD e,e"; },
		[](const CPU &, uint16_t) { return "LD e,h"; },
		[](const CPU &, uint16_t) { return "LD e,l"; },
		[](const CPU &cpu, uint16_t) { return "LD e,(" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "LD e,a"; },
		[](const CPU &, uint16_t) { return "LD h,b"; },
		[](const CPU &, uint16_t) { return "LD h,c"; },
		[](const CPU &, uint16_t) { return "LD h,d"; },
		[](const CPU &, uint16_t) { return "LD h,e"; },
		[](const CPU &, uint16_t) { return "LD h,h"; },
		[](const CPU &, uint16_t) { return "LD h,l"; },
		[](const CPU &cpu, uint16_t) { return "LD h,(" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "LD h,a"; },
		[](const CPU &, uint16_t) { return "LD l,b"; },
		[](const CPU &, uint16_t) { return "LD l,c"; },
		[](const CPU &, uint16_t) { return "LD l,d"; },
		[](const CPU &, uint16_t) { return "LD l,e"; },
		[](const CPU &, uint16_t) { return "LD l,h"; },
		[](const CPU &, uint16_t) { return "LD l,l"; },
		[](const CPU &cpu, uint16_t) { return "LD l,(" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "LD l,a"; },
		[](const CPU &cpu, uint16_t) { return "LD (" + intToHex(cpu.getRegisters().hl, 4) + "),b"; },
		[](const CPU &cpu, uint16_t) { return "LD (" + intToHex(cpu.getRegisters().hl, 4) + "),c"; },
		[](const CPU &cpu, uint16_t) { return "LD (" + intToHex(cpu.getRegisters().hl, 4) + "),d"; },
		[](const CPU &cpu, uint16_t) { return "LD (" + intToHex(cpu.getRegisters().hl, 4) + "),e"; },
		[](const CPU &cpu, uint16_t) { return "LD (" + intToHex(cpu.getRegisters().hl, 4) + "),h"; },
		[](const CPU &cpu, uint16_t) { return "LD (" + intToHex(cpu.getRegisters().hl, 4) + "),l"; },
		[](const CPU &, uint16_t) { return "HALT"; },
		[](const CPU &cpu, uint16_t) { return "LD (" + intToHex(cpu.getRegisters().hl, 4) + "),a"; },
		[](const CPU &, uint16_t) { return "LD a,b"; },
		[](const CPU &, uint16_t) { return "LD a,c"; },
		[](const CPU &, uint16_t) { return "LD a,d"; },
		[](const CPU &, uint16_t) { return "LD a,e"; },
		[](const CPU &, uint16_t) { return "LD a,h"; },
		[](const CPU &, uint16_t) { return "LD a,l"; },
		[](const CPU &cpu, uint16_t) { return "LD a,(" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "LD a,a"; },
		[](const CPU &, uint16_t) { return "ADD b"; },
		[](const CPU &, uint16_t) { return "ADD c"; },
		[](const CPU &, uint16_t) { return "ADD d"; },
		[](const CPU &, uint16_t) { return "ADD e"; },
		[](const CPU &, uint16_t) { return "ADD h"; },
		[](const CPU &, uint16_t) { return "ADD l"; },
		[](const CPU &cpu, uint16_t) { return "ADD (" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "ADD a"; },
		[](const CPU &, uint16_t) { return "ADC b"; },
		[](const CPU &, uint16_t) { return "ADC c"; },
		[](const CPU &, uint16_t) { return "ADC d"; },
		[](const CPU &, uint16_t) { return "ADC e"; },
		[](const CPU &, uint16_t) { return "ADC h"; },
		[](const CPU &, uint16_t) { return "ADC l"; },
		[](const CPU &cpu, uint16_t) { return "ADC (" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "ADC a"; },
		[](const CPU &, uint16_t) { return "SUB b"; },
		[](const CPU &, uint16_t) { return "SUB c"; },
		[](const CPU &, uint16_t) { return "SUB d"; },
		[](const CPU &, uint16_t) { return "SUB e"; },
		[](const CPU &, uint16_t) { return "SUB h"; },
		[](const CPU &, uint16_t) { return "SUB l"; },
		[](const CPU &cpu, uint16_t) { return "SUB (" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "SUB a"; },
		[](const CPU &, uint16_t) { return "SBC b"; },
		[](const CPU &, uint16_t) { return "SBC c"; },
		[](const CPU &, uint16_t) { return "SBC d"; },
		[](const CPU &, uint16_t) { return "SBC e"; },
		[](const CPU &, uint16_t) { return "SBC h"; },
		[](const CPU &, uint16_t) { return "SBC l"; },
		[](const CPU &cpu, uint16_t) { return "SBC (" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "SBC a"; },
		[](const CPU &, uint16_t) { return "AND b"; },
		[](const CPU &, uint16_t) { return "AND c"; },
		[](const CPU &, uint16_t) { return "AND d"; },
		[](const CPU &, uint16_t) { return "AND e"; },
		[](const CPU &, uint16_t) { return "AND h"; },
		[](const CPU &, uint16_t) { return "AND l"; },
		[](const CPU &cpu, uint16_t) { return "AND (" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "AND a"; },
		[](const CPU &, uint16_t) { return "XOR b"; },
		[](const CPU &, uint16_t) { return "XOR c"; },
		[](const CPU &, uint16_t) { return "XOR d"; },
		[](const CPU &, uint16_t) { return "XOR e"; },
		[](const CPU &, uint16_t) { return "XOR h"; },
		[](const CPU &, uint16_t) { return "XOR l"; },
		[](const CPU &cpu, uint16_t) { return "XOR (" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "XOR a"; },
		[](const CPU &, uint16_t) { return "OR b"; },
		[](const CPU &, uint16_t) { return "OR c"; },
		[](const CPU &, uint16_t) { return "OR d"; },
		[](const CPU &, uint16_t) { return "OR e"; },
		[](const CPU &, uint16_t) { return "OR h"; },
		[](const CPU &, uint16_t) { return "OR l"; },
		[](const CPU &cpu, uint16_t) { return "OR (" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "OR a"; },
		[](const CPU &, uint16_t) { return "CP b"; },
		[](const CPU &, uint16_t) { return "CP c"; },
		[](const CPU &, uint16_t) { return "CP d"; },
		[](const CPU &, uint16_t) { return "CP e"; },
		[](const CPU &, uint16_t) { return "CP h"; },
		[](const CPU &, uint16_t) { return "CP l"; },
		[](const CPU &cpu, uint16_t) { return "CP (" + intToHex(cpu.getRegisters().hl, 4) + ")"; },
		[](const CPU &, uint16_t) { return "CP a"; },
		[](const CPU &, uint16_t) { return "RET nz"; },
		[](const CPU &, uint16_t) { return "POP bc"; },
		[](const CPU &, uint16_t) { return "JP nz,**"; },
		[](const CPU &, uint16_t) { return "JP **"; },
		[](const CPU &, uint16_t) { return "CALL nz,**"; },
		[](const CPU &, uint16_t) { return "PUSH bc"; },
		[](const CPU &, uint16_t) { return "ADD *"; },
		[](const CPU &, uint16_t) { return "RST 00h"; },
		[](const CPU &, uint16_t) { return "RET z"; },
		[](const CPU &, uint16_t) { return "RET"; },
		[](const CPU &, uint16_t) { return "JP z,*";},
		[](const CPU &cpu, uint16_t address) {
			return _bitLevelInstructionsString2[cpu.read(address)](cpu, address + 1);
		},
		[](const CPU &, uint16_t) { return "CALL z,**"; },
		[](const CPU &, uint16_t) { return "CALL **"; },
		[](const CPU &, uint16_t) { return "ADC *"; },
		[](const CPU &, uint16_t) { return "RST 08h"; },
		[](const CPU &, uint16_t) { return "RET nc"; },
		[](const CPU &, uint16_t) { return "POP de"; },
		[](const CPU &, uint16_t) { return "JP nc,**"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "CALL nc,**"; },
		[](const CPU &, uint16_t) { return "PUSH de"; },
		[](const CPU &, uint16_t) { return "SUB *"; },
		[](const CPU &, uint16_t) { return "RST 10h"; },
		[](const CPU &, uint16_t) { return "RET c"; },
		[](const CPU &, uint16_t) { return "RETI"; },
		[](const CPU &, uint16_t) { return "JP c,*"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "CALL c,**"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "SBC *"; },
		[](const CPU &, uint16_t) { return "RST 18h"; },
		[](const CPU &cpu, uint16_t address) { return "LD (FF00+" + intToHex(cpu.read(address)) + "),a"; },
		[](const CPU &, uint16_t) { return "POP hl"; },
		[](const CPU &cpu, uint16_t) { return "LD (FF00+" + intToHex(cpu.getRegisters().c) + "),a"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "PUSH hl"; },
		[](const CPU &, uint16_t) { return "AND *"; },
		[](const CPU &, uint16_t) { return "RST 20h"; },
		[](const CPU &, uint16_t) { return "ADD sp,*"; },
		[](const CPU &, uint16_t) { return "JP (hl)"; },
		[](const CPU &cpu, uint16_t address) { return "LD (" + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address)) + "),a"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "XOR *"; },
		[](const CPU &, uint16_t) { return "RST 28h"; },
		[](const CPU &cpu, uint16_t address) { return "LD a,(FF00+" + intToHex(cpu.read(address)) + ")"; },
		[](const CPU &, uint16_t) { return "POP af"; },
		[](const CPU &cpu, uint16_t) { return "LD a,(FF00+" + intToHex(cpu.getRegisters().c) + ")"; },
		[](const CPU &, uint16_t) { return "DI"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "PUSH af"; },
		[](const CPU &, uint16_t) { return "OR *"; },
		[](const CPU &, uint16_t) { return "RST 30h"; },
		[](const CPU &, uint16_t) { return "LD hl,sp+*"; },
		[](const CPU &, uint16_t) { return "LD sp,hl"; },
		[](const CPU &cpu, uint16_t address) { return "LD a,(" + intToHex(cpu.read(address + 1)) + intToHex(cpu.read(address)) + ")"; },
		[](const CPU &, uint16_t) { return "EI"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &, uint16_t) { return "Invalid Opcode"; },
		[](const CPU &cpu, uint16_t address) { return "CP " + intToHex(cpu.read(address)); },
		[](const CPU &, uint16_t) { return "RST 38h"; },
	};


	const std::function<standard::string (const CPU &, uint16_t)> _bitLevelInstructionsString[256] = {
		[](const CPU &, uint16_t) { return "RLC b"; },
		[](const CPU &, uint16_t) { return "RLC c"; },
		[](const CPU &, uint16_t) { return "RLC d"; },
		[](const CPU &, uint16_t) { return "RLC e"; },
		[](const CPU &, uint16_t) { return "RLC h"; },
		[](const CPU &, uint16_t) { return "RLC l"; },
		[](const CPU &, uint16_t) { return "RLC (hl)"; },
		[](const CPU &, uint16_t) { return "RLC a"; },
		[](const CPU &, uint16_t) { return "RRC b"; },
		[](const CPU &, uint16_t) { return "RRC c"; },
		[](const CPU &, uint16_t) { return "RRC d"; },
		[](const CPU &, uint16_t) { return "RRC e"; },
		[](const CPU &, uint16_t) { return "RRC h"; },
		[](const CPU &, uint16_t) { return "RRC l"; },
		[](const CPU &, uint16_t) { return "RRC (hl)"; },
		[](const CPU &, uint16_t) { return "RRC a"; },
		[](const CPU &, uint16_t) { return "RL b"; },
		[](const CPU &, uint16_t) { return "RL c"; },
		[](const CPU &, uint16_t) { return "RL d"; },
		[](const CPU &, uint16_t) { return "RL e"; },
		[](const CPU &, uint16_t) { return "RL h"; },
		[](const CPU &, uint16_t) { return "RL l"; },
		[](const CPU &, uint16_t) { return "RL (hl)"; },
		[](const CPU &, uint16_t) { return "RL a"; },
		[](const CPU &, uint16_t) { return "RR b"; },
		[](const CPU &, uint16_t) { return "RR c"; },
		[](const CPU &, uint16_t) { return "RR d"; },
		[](const CPU &, uint16_t) { return "RR e"; },
		[](const CPU &, uint16_t) { return "RR h"; },
		[](const CPU &, uint16_t) { return "RR l"; },
		[](const CPU &, uint16_t) { return "RR (hl)"; },
		[](const CPU &, uint16_t) { return "RR a"; },
		[](const CPU &, uint16_t) { return "SLA b"; },
		[](const CPU &, uint16_t) { return "SLA c"; },
		[](const CPU &, uint16_t) { return "SLA d"; },
		[](const CPU &, uint16_t) { return "SLA e"; },
		[](const CPU &, uint16_t) { return "SLA h"; },
		[](const CPU &, uint16_t) { return "SLA l"; },
		[](const CPU &, uint16_t) { return "SLA (hl)"; },
		[](const CPU &, uint16_t) { return "SLA a"; },
		[](const CPU &, uint16_t) { return "SRA b"; },
		[](const CPU &, uint16_t) { return "SRA c"; },
		[](const CPU &, uint16_t) { return "SRA d"; },
		[](const CPU &, uint16_t) { return "SRA e"; },
		[](const CPU &, uint16_t) { return "SRA h"; },
		[](const CPU &, uint16_t) { return "SRA l"; },
		[](const CPU &, uint16_t) { return "SRA (hl)"; },
		[](const CPU &, uint16_t) { return "SRA a"; },
		[](const CPU &, uint16_t) { return "SWAP b"; },
		[](const CPU &, uint16_t) { return "SWAP c"; },
		[](const CPU &, uint16_t) { return "SWAP d"; },
		[](const CPU &, uint16_t) { return "SWAP e"; },
		[](const CPU &, uint16_t) { return "SWAP h"; },
		[](const CPU &, uint16_t) { return "SWAP l"; },
		[](const CPU &, uint16_t) { return "SWAP (hl)"; },
		[](const CPU &, uint16_t) { return "SWAP a"; },
		[](const CPU &, uint16_t) { return "SRL b"; },
		[](const CPU &, uint16_t) { return "SRL c"; },
		[](const CPU &, uint16_t) { return "SRL d"; },
		[](const CPU &, uint16_t) { return "SRL e"; },
		[](const CPU &, uint16_t) { return "SRL h"; },
		[](const CPU &, uint16_t) { return "SRL l"; },
		[](const CPU &, uint16_t) { return "SRL (hl)"; },
		[](const CPU &, uint16_t) { return "SRL a"; },
		[](const CPU &, uint16_t) { return "BIT 0,b"; },
		[](const CPU &, uint16_t) { return "BIT 0,c"; },
		[](const CPU &, uint16_t) { return "BIT 0,d"; },
		[](const CPU &, uint16_t) { return "BIT 0,e"; },
		[](const CPU &, uint16_t) { return "BIT 0,h"; },
		[](const CPU &, uint16_t) { return "BIT 0,l"; },
		[](const CPU &, uint16_t) { return "BIT 0,(hl)"; },
		[](const CPU &, uint16_t) { return "BIT 0,a"; },
		[](const CPU &, uint16_t) { return "BIT 1,b"; },
		[](const CPU &, uint16_t) { return "BIT 1,c"; },
		[](const CPU &, uint16_t) { return "BIT 1,d"; },
		[](const CPU &, uint16_t) { return "BIT 1,e"; },
		[](const CPU &, uint16_t) { return "BIT 1,h"; },
		[](const CPU &, uint16_t) { return "BIT 1,l"; },
		[](const CPU &, uint16_t) { return "BIT 1,(hl)"; },
		[](const CPU &, uint16_t) { return "BIT 1,a"; },
		[](const CPU &, uint16_t) { return "BIT 2,b"; },
		[](const CPU &, uint16_t) { return "BIT 2,c"; },
		[](const CPU &, uint16_t) { return "BIT 2,d"; },
		[](const CPU &, uint16_t) { return "BIT 2,e"; },
		[](const CPU &, uint16_t) { return "BIT 2,h"; },
		[](const CPU &, uint16_t) { return "BIT 2,l"; },
		[](const CPU &, uint16_t) { return "BIT 2,(hl)"; },
		[](const CPU &, uint16_t) { return "BIT 2,a"; },
		[](const CPU &, uint16_t) { return "BIT 3,b"; },
		[](const CPU &, uint16_t) { return "BIT 3,c"; },
		[](const CPU &, uint16_t) { return "BIT 3,d"; },
		[](const CPU &, uint16_t) { return "BIT 3,e"; },
		[](const CPU &, uint16_t) { return "BIT 3,h"; },
		[](const CPU &, uint16_t) { return "BIT 3,l"; },
		[](const CPU &, uint16_t) { return "BIT 3,(hl)"; },
		[](const CPU &, uint16_t) { return "BIT 3,a"; },
		[](const CPU &, uint16_t) { return "BIT 4,b"; },
		[](const CPU &, uint16_t) { return "BIT 4,c"; },
		[](const CPU &, uint16_t) { return "BIT 4,d"; },
		[](const CPU &, uint16_t) { return "BIT 4,e"; },
		[](const CPU &, uint16_t) { return "BIT 4,h"; },
		[](const CPU &, uint16_t) { return "BIT 4,l"; },
		[](const CPU &, uint16_t) { return "BIT 4,(hl)"; },
		[](const CPU &, uint16_t) { return "BIT 4,a"; },
		[](const CPU &, uint16_t) { return "BIT 5,b"; },
		[](const CPU &, uint16_t) { return "BIT 5,c"; },
		[](const CPU &, uint16_t) { return "BIT 5,d"; },
		[](const CPU &, uint16_t) { return "BIT 5,e"; },
		[](const CPU &, uint16_t) { return "BIT 5,h"; },
		[](const CPU &, uint16_t) { return "BIT 5,l"; },
		[](const CPU &, uint16_t) { return "BIT 5,(hl)"; },
		[](const CPU &, uint16_t) { return "BIT 5,a"; },
		[](const CPU &, uint16_t) { return "BIT 6,b"; },
		[](const CPU &, uint16_t) { return "BIT 6,c"; },
		[](const CPU &, uint16_t) { return "BIT 6,d"; },
		[](const CPU &, uint16_t) { return "BIT 6,e"; },
		[](const CPU &, uint16_t) { return "BIT 6,h"; },
		[](const CPU &, uint16_t) { return "BIT 6,l"; },
		[](const CPU &, uint16_t) { return "BIT 6,(hl)"; },
		[](const CPU &, uint16_t) { return "BIT 6,a"; },
		[](const CPU &, uint16_t) { return "BIT 7,b"; },
		[](const CPU &, uint16_t) { return "BIT 7,c"; },
		[](const CPU &, uint16_t) { return "BIT 7,d"; },
		[](const CPU &, uint16_t) { return "BIT 7,e"; },
		[](const CPU &, uint16_t) { return "BIT 7,h"; },
		[](const CPU &, uint16_t) { return "BIT 7,l"; },
		[](const CPU &, uint16_t) { return "BIT 7,(hl)"; },
		[](const CPU &, uint16_t) { return "BIT 7,a"; },
		[](const CPU &, uint16_t) { return "RES 0,b"; },
		[](const CPU &, uint16_t) { return "RES 0,c"; },
		[](const CPU &, uint16_t) { return "RES 0,d"; },
		[](const CPU &, uint16_t) { return "RES 0,e"; },
		[](const CPU &, uint16_t) { return "RES 0,h"; },
		[](const CPU &, uint16_t) { return "RES 0,l"; },
		[](const CPU &, uint16_t) { return "RES 0,(hl)"; },
		[](const CPU &, uint16_t) { return "RES 0,a"; },
		[](const CPU &, uint16_t) { return "RES 1,b"; },
		[](const CPU &, uint16_t) { return "RES 1,c"; },
		[](const CPU &, uint16_t) { return "RES 1,d"; },
		[](const CPU &, uint16_t) { return "RES 1,e"; },
		[](const CPU &, uint16_t) { return "RES 1,h"; },
		[](const CPU &, uint16_t) { return "RES 1,l"; },
		[](const CPU &, uint16_t) { return "RES 1,(hl)"; },
		[](const CPU &, uint16_t) { return "RES 1,a"; },
		[](const CPU &, uint16_t) { return "RES 2,b"; },
		[](const CPU &, uint16_t) { return "RES 2,c"; },
		[](const CPU &, uint16_t) { return "RES 2,d"; },
		[](const CPU &, uint16_t) { return "RES 2,e"; },
		[](const CPU &, uint16_t) { return "RES 2,h"; },
		[](const CPU &, uint16_t) { return "RES 2,l"; },
		[](const CPU &, uint16_t) { return "RES 2,(hl)"; },
		[](const CPU &, uint16_t) { return "RES 2,a"; },
		[](const CPU &, uint16_t) { return "RES 3,b"; },
		[](const CPU &, uint16_t) { return "RES 3,c"; },
		[](const CPU &, uint16_t) { return "RES 3,d"; },
		[](const CPU &, uint16_t) { return "RES 3,e"; },
		[](const CPU &, uint16_t) { return "RES 3,h"; },
		[](const CPU &, uint16_t) { return "RES 3,l"; },
		[](const CPU &, uint16_t) { return "RES 3,(hl)"; },
		[](const CPU &, uint16_t) { return "RES 3,a"; },
		[](const CPU &, uint16_t) { return "RES 4,b"; },
		[](const CPU &, uint16_t) { return "RES 4,c"; },
		[](const CPU &, uint16_t) { return "RES 4,d"; },
		[](const CPU &, uint16_t) { return "RES 4,e"; },
		[](const CPU &, uint16_t) { return "RES 4,h"; },
		[](const CPU &, uint16_t) { return "RES 4,l"; },
		[](const CPU &, uint16_t) { return "RES 4,(hl)"; },
		[](const CPU &, uint16_t) { return "RES 4,a"; },
		[](const CPU &, uint16_t) { return "RES 5,b"; },
		[](const CPU &, uint16_t) { return "RES 5,c"; },
		[](const CPU &, uint16_t) { return "RES 5,d"; },
		[](const CPU &, uint16_t) { return "RES 5,e"; },
		[](const CPU &, uint16_t) { return "RES 5,h"; },
		[](const CPU &, uint16_t) { return "RES 5,l"; },
		[](const CPU &, uint16_t) { return "RES 5,(hl)"; },
		[](const CPU &, uint16_t) { return "RES 5,a"; },
		[](const CPU &, uint16_t) { return "RES 6,b"; },
		[](const CPU &, uint16_t) { return "RES 6,c"; },
		[](const CPU &, uint16_t) { return "RES 6,d"; },
		[](const CPU &, uint16_t) { return "RES 6,e"; },
		[](const CPU &, uint16_t) { return "RES 6,h"; },
		[](const CPU &, uint16_t) { return "RES 6,l"; },
		[](const CPU &, uint16_t) { return "RES 6,(hl)"; },
		[](const CPU &, uint16_t) { return "RES 6,a"; },
		[](const CPU &, uint16_t) { return "RES 7,b"; },
		[](const CPU &, uint16_t) { return "RES 7,c"; },
		[](const CPU &, uint16_t) { return "RES 7,d"; },
		[](const CPU &, uint16_t) { return "RES 7,e"; },
		[](const CPU &, uint16_t) { return "RES 7,h"; },
		[](const CPU &, uint16_t) { return "RES 7,l"; },
		[](const CPU &, uint16_t) { return "RES 7,(hl)"; },
		[](const CPU &, uint16_t) { return "RES 7,a"; },
		[](const CPU &, uint16_t) { return "SET 0,b"; },
		[](const CPU &, uint16_t) { return "SET 0,c"; },
		[](const CPU &, uint16_t) { return "SET 0,d"; },
		[](const CPU &, uint16_t) { return "SET 0,e"; },
		[](const CPU &, uint16_t) { return "SET 0,h"; },
		[](const CPU &, uint16_t) { return "SET 0,l"; },
		[](const CPU &, uint16_t) { return "SET 0,(hl)"; },
		[](const CPU &, uint16_t) { return "SET 0,a"; },
		[](const CPU &, uint16_t) { return "SET 1,b"; },
		[](const CPU &, uint16_t) { return "SET 1,c"; },
		[](const CPU &, uint16_t) { return "SET 1,d"; },
		[](const CPU &, uint16_t) { return "SET 1,e"; },
		[](const CPU &, uint16_t) { return "SET 1,h"; },
		[](const CPU &, uint16_t) { return "SET 1,l"; },
		[](const CPU &, uint16_t) { return "SET 1,(hl)"; },
		[](const CPU &, uint16_t) { return "SET 1,a"; },
		[](const CPU &, uint16_t) { return "SET 2,b"; },
		[](const CPU &, uint16_t) { return "SET 2,c"; },
		[](const CPU &, uint16_t) { return "SET 2,d"; },
		[](const CPU &, uint16_t) { return "SET 2,e"; },
		[](const CPU &, uint16_t) { return "SET 2,h"; },
		[](const CPU &, uint16_t) { return "SET 2,l"; },
		[](const CPU &, uint16_t) { return "SET 2,(hl)"; },
		[](const CPU &, uint16_t) { return "SET 2,a"; },
		[](const CPU &, uint16_t) { return "SET 3,b"; },
		[](const CPU &, uint16_t) { return "SET 3,c"; },
		[](const CPU &, uint16_t) { return "SET 3,d"; },
		[](const CPU &, uint16_t) { return "SET 3,e"; },
		[](const CPU &, uint16_t) { return "SET 3,h"; },
		[](const CPU &, uint16_t) { return "SET 3,l"; },
		[](const CPU &, uint16_t) { return "SET 3,(hl)"; },
		[](const CPU &, uint16_t) { return "SET 3,a"; },
		[](const CPU &, uint16_t) { return "SET 4,b"; },
		[](const CPU &, uint16_t) { return "SET 4,c"; },
		[](const CPU &, uint16_t) { return "SET 4,d"; },
		[](const CPU &, uint16_t) { return "SET 4,e"; },
		[](const CPU &, uint16_t) { return "SET 4,h"; },
		[](const CPU &, uint16_t) { return "SET 4,l"; },
		[](const CPU &, uint16_t) { return "SET 4,(hl)"; },
		[](const CPU &, uint16_t) { return "SET 4,a"; },
		[](const CPU &, uint16_t) { return "SET 5,b"; },
		[](const CPU &, uint16_t) { return "SET 5,c"; },
		[](const CPU &, uint16_t) { return "SET 5,d"; },
		[](const CPU &, uint16_t) { return "SET 5,e"; },
		[](const CPU &, uint16_t) { return "SET 5,h"; },
		[](const CPU &, uint16_t) { return "SET 5,l"; },
		[](const CPU &, uint16_t) { return "SET 5,(hl)"; },
		[](const CPU &, uint16_t) { return "SET 5,a"; },
		[](const CPU &, uint16_t) { return "SET 6,b"; },
		[](const CPU &, uint16_t) { return "SET 6,c"; },
		[](const CPU &, uint16_t) { return "SET 6,d"; },
		[](const CPU &, uint16_t) { return "SET 6,e"; },
		[](const CPU &, uint16_t) { return "SET 6,h"; },
		[](const CPU &, uint16_t) { return "SET 6,l"; },
		[](const CPU &, uint16_t) { return "SET 6,(hl)"; },
		[](const CPU &, uint16_t) { return "SET 6,a"; },
		[](const CPU &, uint16_t) { return "SET 7,b"; },
		[](const CPU &, uint16_t) { return "SET 7,c"; },
		[](const CPU &, uint16_t) { return "SET 7,d"; },
		[](const CPU &, uint16_t) { return "SET 7,e"; },
		[](const CPU &, uint16_t) { return "SET 7,h"; },
		[](const CPU &, uint16_t) { return "SET 7,l"; },
		[](const CPU &, uint16_t) { return "SET 7,(hl)"; },
		[](const CPU &, uint16_t) { return "SET 7,a"; },
	};

	const std::function<standard::string (const CPU &, uint16_t)> _bitLevelInstructionsString2[256] = {
		[](const CPU &, uint16_t) { return "RLC b"; },
		[](const CPU &, uint16_t) { return "RLC c"; },
		[](const CPU &, uint16_t) { return "RLC d"; },
		[](const CPU &, uint16_t) { return "RLC e"; },
		[](const CPU &, uint16_t) { return "RLC h"; },
		[](const CPU &, uint16_t) { return "RLC l"; },
		[](const CPU &cpu, uint16_t) { return "RLC (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "RLC a"; },
		[](const CPU &, uint16_t) { return "RRC b"; },
		[](const CPU &, uint16_t) { return "RRC c"; },
		[](const CPU &, uint16_t) { return "RRC d"; },
		[](const CPU &, uint16_t) { return "RRC e"; },
		[](const CPU &, uint16_t) { return "RRC h"; },
		[](const CPU &, uint16_t) { return "RRC l"; },
		[](const CPU &cpu, uint16_t) { return "RRC (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "RRC a"; },
		[](const CPU &, uint16_t) { return "RL b"; },
		[](const CPU &, uint16_t) { return "RL c"; },
		[](const CPU &, uint16_t) { return "RL d"; },
		[](const CPU &, uint16_t) { return "RL e"; },
		[](const CPU &, uint16_t) { return "RL h"; },
		[](const CPU &, uint16_t) { return "RL l"; },
		[](const CPU &cpu, uint16_t) { return "RL (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "RL a"; },
		[](const CPU &, uint16_t) { return "RR b"; },
		[](const CPU &, uint16_t) { return "RR c"; },
		[](const CPU &, uint16_t) { return "RR d"; },
		[](const CPU &, uint16_t) { return "RR e"; },
		[](const CPU &, uint16_t) { return "RR h"; },
		[](const CPU &, uint16_t) { return "RR l"; },
		[](const CPU &cpu, uint16_t) { return "RR (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "RR a"; },
		[](const CPU &, uint16_t) { return "SLA b"; },
		[](const CPU &, uint16_t) { return "SLA c"; },
		[](const CPU &, uint16_t) { return "SLA d"; },
		[](const CPU &, uint16_t) { return "SLA e"; },
		[](const CPU &, uint16_t) { return "SLA h"; },
		[](const CPU &, uint16_t) { return "SLA l"; },
		[](const CPU &cpu, uint16_t) { return "SLA (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "SLA a"; },
		[](const CPU &, uint16_t) { return "SRA b"; },
		[](const CPU &, uint16_t) { return "SRA c"; },
		[](const CPU &, uint16_t) { return "SRA d"; },
		[](const CPU &, uint16_t) { return "SRA e"; },
		[](const CPU &, uint16_t) { return "SRA h"; },
		[](const CPU &, uint16_t) { return "SRA l"; },
		[](const CPU &cpu, uint16_t) { return "SRA (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "SRA a"; },
		[](const CPU &, uint16_t) { return "SWAP b"; },
		[](const CPU &, uint16_t) { return "SWAP c"; },
		[](const CPU &, uint16_t) { return "SWAP d"; },
		[](const CPU &, uint16_t) { return "SWAP e"; },
		[](const CPU &, uint16_t) { return "SWAP h"; },
		[](const CPU &, uint16_t) { return "SWAP l"; },
		[](const CPU &cpu, uint16_t) { return "SWAP (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "SWAP a"; },
		[](const CPU &, uint16_t) { return "SRL b"; },
		[](const CPU &, uint16_t) { return "SRL c"; },
		[](const CPU &, uint16_t) { return "SRL d"; },
		[](const CPU &, uint16_t) { return "SRL e"; },
		[](const CPU &, uint16_t) { return "SRL h"; },
		[](const CPU &, uint16_t) { return "SRL l"; },
		[](const CPU &cpu, uint16_t) { return "SRL (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "SRL a"; },
		[](const CPU &, uint16_t) { return "BIT 0,b"; },
		[](const CPU &, uint16_t) { return "BIT 0,c"; },
		[](const CPU &, uint16_t) { return "BIT 0,d"; },
		[](const CPU &, uint16_t) { return "BIT 0,e"; },
		[](const CPU &, uint16_t) { return "BIT 0,h"; },
		[](const CPU &, uint16_t) { return "BIT 0,l"; },
		[](const CPU &cpu, uint16_t) { return "BIT 0, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "BIT 0,a"; },
		[](const CPU &, uint16_t) { return "BIT 1,b"; },
		[](const CPU &, uint16_t) { return "BIT 1,c"; },
		[](const CPU &, uint16_t) { return "BIT 1,d"; },
		[](const CPU &, uint16_t) { return "BIT 1,e"; },
		[](const CPU &, uint16_t) { return "BIT 1,h"; },
		[](const CPU &, uint16_t) { return "BIT 1,l"; },
		[](const CPU &cpu, uint16_t) { return "BIT 1, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "BIT 1,a"; },
		[](const CPU &, uint16_t) { return "BIT 2,b"; },
		[](const CPU &, uint16_t) { return "BIT 2,c"; },
		[](const CPU &, uint16_t) { return "BIT 2,d"; },
		[](const CPU &, uint16_t) { return "BIT 2,e"; },
		[](const CPU &, uint16_t) { return "BIT 2,h"; },
		[](const CPU &, uint16_t) { return "BIT 2,l"; },
		[](const CPU &cpu, uint16_t) { return "BIT 2, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "BIT 2,a"; },
		[](const CPU &, uint16_t) { return "BIT 3,b"; },
		[](const CPU &, uint16_t) { return "BIT 3,c"; },
		[](const CPU &, uint16_t) { return "BIT 3,d"; },
		[](const CPU &, uint16_t) { return "BIT 3,e"; },
		[](const CPU &, uint16_t) { return "BIT 3,h"; },
		[](const CPU &, uint16_t) { return "BIT 3,l"; },
		[](const CPU &cpu, uint16_t) { return "BIT 3, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "BIT 3,a"; },
		[](const CPU &, uint16_t) { return "BIT 4,b"; },
		[](const CPU &, uint16_t) { return "BIT 4,c"; },
		[](const CPU &, uint16_t) { return "BIT 4,d"; },
		[](const CPU &, uint16_t) { return "BIT 4,e"; },
		[](const CPU &, uint16_t) { return "BIT 4,h"; },
		[](const CPU &, uint16_t) { return "BIT 4,l"; },
		[](const CPU &cpu, uint16_t) { return "BIT 4, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "BIT 4,a"; },
		[](const CPU &, uint16_t) { return "BIT 5,b"; },
		[](const CPU &, uint16_t) { return "BIT 5,c"; },
		[](const CPU &, uint16_t) { return "BIT 5,d"; },
		[](const CPU &, uint16_t) { return "BIT 5,e"; },
		[](const CPU &, uint16_t) { return "BIT 5,h"; },
		[](const CPU &, uint16_t) { return "BIT 5,l"; },
		[](const CPU &cpu, uint16_t) { return "BIT 5, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "BIT 5,a"; },
		[](const CPU &, uint16_t) { return "BIT 6,b"; },
		[](const CPU &, uint16_t) { return "BIT 6,c"; },
		[](const CPU &, uint16_t) { return "BIT 6,d"; },
		[](const CPU &, uint16_t) { return "BIT 6,e"; },
		[](const CPU &, uint16_t) { return "BIT 6,h"; },
		[](const CPU &, uint16_t) { return "BIT 6,l"; },
		[](const CPU &cpu, uint16_t) { return "BIT 6, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "BIT 6,a"; },
		[](const CPU &, uint16_t) { return "BIT 7,b"; },
		[](const CPU &, uint16_t) { return "BIT 7,c"; },
		[](const CPU &, uint16_t) { return "BIT 7,d"; },
		[](const CPU &, uint16_t) { return "BIT 7,e"; },
		[](const CPU &, uint16_t) { return "BIT 7,h"; },
		[](const CPU &, uint16_t) { return "BIT 7,l"; },
		[](const CPU &cpu, uint16_t) { return "BIT 7, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "BIT 7,a"; },
		[](const CPU &, uint16_t) { return "RES 0,b"; },
		[](const CPU &, uint16_t) { return "RES 0,c"; },
		[](const CPU &, uint16_t) { return "RES 0,d"; },
		[](const CPU &, uint16_t) { return "RES 0,e"; },
		[](const CPU &, uint16_t) { return "RES 0,h"; },
		[](const CPU &, uint16_t) { return "RES 0,l"; },
		[](const CPU &cpu, uint16_t) { return "RES 0, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "RES 0,a"; },
		[](const CPU &, uint16_t) { return "RES 1,b"; },
		[](const CPU &, uint16_t) { return "RES 1,c"; },
		[](const CPU &, uint16_t) { return "RES 1,d"; },
		[](const CPU &, uint16_t) { return "RES 1,e"; },
		[](const CPU &, uint16_t) { return "RES 1,h"; },
		[](const CPU &, uint16_t) { return "RES 1,l"; },
		[](const CPU &cpu, uint16_t) { return "RES 1, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "RES 1,a"; },
		[](const CPU &, uint16_t) { return "RES 2,b"; },
		[](const CPU &, uint16_t) { return "RES 2,c"; },
		[](const CPU &, uint16_t) { return "RES 2,d"; },
		[](const CPU &, uint16_t) { return "RES 2,e"; },
		[](const CPU &, uint16_t) { return "RES 2,h"; },
		[](const CPU &, uint16_t) { return "RES 2,l"; },
		[](const CPU &cpu, uint16_t) { return "RES 2, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "RES 2,a"; },
		[](const CPU &, uint16_t) { return "RES 3,b"; },
		[](const CPU &, uint16_t) { return "RES 3,c"; },
		[](const CPU &, uint16_t) { return "RES 3,d"; },
		[](const CPU &, uint16_t) { return "RES 3,e"; },
		[](const CPU &, uint16_t) { return "RES 3,h"; },
		[](const CPU &, uint16_t) { return "RES 3,l"; },
		[](const CPU &cpu, uint16_t) { return "RES 3, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "RES 3,a"; },
		[](const CPU &, uint16_t) { return "RES 4,b"; },
		[](const CPU &, uint16_t) { return "RES 4,c"; },
		[](const CPU &, uint16_t) { return "RES 4,d"; },
		[](const CPU &, uint16_t) { return "RES 4,e"; },
		[](const CPU &, uint16_t) { return "RES 4,h"; },
		[](const CPU &, uint16_t) { return "RES 4,l"; },
		[](const CPU &cpu, uint16_t) { return "RES 4, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "RES 4,a"; },
		[](const CPU &, uint16_t) { return "RES 5,b"; },
		[](const CPU &, uint16_t) { return "RES 5,c"; },
		[](const CPU &, uint16_t) { return "RES 5,d"; },
		[](const CPU &, uint16_t) { return "RES 5,e"; },
		[](const CPU &, uint16_t) { return "RES 5,h"; },
		[](const CPU &, uint16_t) { return "RES 5,l"; },
		[](const CPU &cpu, uint16_t) { return "RES 5, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "RES 5,a"; },
		[](const CPU &, uint16_t) { return "RES 6,b"; },
		[](const CPU &, uint16_t) { return "RES 6,c"; },
		[](const CPU &, uint16_t) { return "RES 6,d"; },
		[](const CPU &, uint16_t) { return "RES 6,e"; },
		[](const CPU &, uint16_t) { return "RES 6,h"; },
		[](const CPU &, uint16_t) { return "RES 6,l"; },
		[](const CPU &cpu, uint16_t) { return "RES 6, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "RES 6,a"; },
		[](const CPU &, uint16_t) { return "RES 7,b"; },
		[](const CPU &, uint16_t) { return "RES 7,c"; },
		[](const CPU &, uint16_t) { return "RES 7,d"; },
		[](const CPU &, uint16_t) { return "RES 7,e"; },
		[](const CPU &, uint16_t) { return "RES 7,h"; },
		[](const CPU &, uint16_t) { return "RES 7,l"; },
		[](const CPU &cpu, uint16_t) { return "RES 7, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "RES 7,a"; },
		[](const CPU &, uint16_t) { return "SET 0,b"; },
		[](const CPU &, uint16_t) { return "SET 0,c"; },
		[](const CPU &, uint16_t) { return "SET 0,d"; },
		[](const CPU &, uint16_t) { return "SET 0,e"; },
		[](const CPU &, uint16_t) { return "SET 0,h"; },
		[](const CPU &, uint16_t) { return "SET 0,l"; },
		[](const CPU &cpu, uint16_t) { return "SET 0, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "SET 0,a"; },
		[](const CPU &, uint16_t) { return "SET 1,b"; },
		[](const CPU &, uint16_t) { return "SET 1,c"; },
		[](const CPU &, uint16_t) { return "SET 1,d"; },
		[](const CPU &, uint16_t) { return "SET 1,e"; },
		[](const CPU &, uint16_t) { return "SET 1,h"; },
		[](const CPU &, uint16_t) { return "SET 1,l"; },
		[](const CPU &cpu, uint16_t) { return "SET 1, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "SET 1,a"; },
		[](const CPU &, uint16_t) { return "SET 2,b"; },
		[](const CPU &, uint16_t) { return "SET 2,c"; },
		[](const CPU &, uint16_t) { return "SET 2,d"; },
		[](const CPU &, uint16_t) { return "SET 2,e"; },
		[](const CPU &, uint16_t) { return "SET 2,h"; },
		[](const CPU &, uint16_t) { return "SET 2,l"; },
		[](const CPU &cpu, uint16_t) { return "SET 2, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "SET 2,a"; },
		[](const CPU &, uint16_t) { return "SET 3,b"; },
		[](const CPU &, uint16_t) { return "SET 3,c"; },
		[](const CPU &, uint16_t) { return "SET 3,d"; },
		[](const CPU &, uint16_t) { return "SET 3,e"; },
		[](const CPU &, uint16_t) { return "SET 3,h"; },
		[](const CPU &, uint16_t) { return "SET 3,l"; },
		[](const CPU &cpu, uint16_t) { return "SET 3, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "SET 3,a"; },
		[](const CPU &, uint16_t) { return "SET 4,b"; },
		[](const CPU &, uint16_t) { return "SET 4,c"; },
		[](const CPU &, uint16_t) { return "SET 4,d"; },
		[](const CPU &, uint16_t) { return "SET 4,e"; },
		[](const CPU &, uint16_t) { return "SET 4,h"; },
		[](const CPU &, uint16_t) { return "SET 4,l"; },
		[](const CPU &cpu, uint16_t) { return "SET 4, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "SET 4,a"; },
		[](const CPU &, uint16_t) { return "SET 5,b"; },
		[](const CPU &, uint16_t) { return "SET 5,c"; },
		[](const CPU &, uint16_t) { return "SET 5,d"; },
		[](const CPU &, uint16_t) { return "SET 5,e"; },
		[](const CPU &, uint16_t) { return "SET 5,h"; },
		[](const CPU &, uint16_t) { return "SET 5,l"; },
		[](const CPU &cpu, uint16_t) { return "SET 5, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "SET 5,a"; },
		[](const CPU &, uint16_t) { return "SET 6,b"; },
		[](const CPU &, uint16_t) { return "SET 6,c"; },
		[](const CPU &, uint16_t) { return "SET 6,d"; },
		[](const CPU &, uint16_t) { return "SET 6,e"; },
		[](const CPU &, uint16_t) { return "SET 6,h"; },
		[](const CPU &, uint16_t) { return "SET 6,l"; },
		[](const CPU &cpu, uint16_t) { return "SET 6, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "SET 6,a"; },
		[](const CPU &, uint16_t) { return "SET 7,b"; },
		[](const CPU &, uint16_t) { return "SET 7,c"; },
		[](const CPU &, uint16_t) { return "SET 7,d"; },
		[](const CPU &, uint16_t) { return "SET 7,e"; },
		[](const CPU &, uint16_t) { return "SET 7,h"; },
		[](const CPU &, uint16_t) { return "SET 7,l"; },
		[](const CPU &cpu, uint16_t) { return "SET 7, (" + intToHex(cpu.getRegisters().hl) + ")"; },
		[](const CPU &, uint16_t) { return "SET 7,a"; },
	};
}